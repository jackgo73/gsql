#!/bin/sh

program='gsql'
version='(unversioned)'
logfile="/tmp/gsql84.log"

die() {
    echo "error: $@" >&2
    echo "error: $@" >> $logfile
    exit 1
}

OS=$(uname)
case $OS
in
    "Linux") echo "[0]os: $OS" 2>&1 | tee -a ${logfile}
    ;;
    *) die "$OS not supported"
    ;;
esac


sub_help(){
    echo "Usage: $program <subcommand> [options]\n"
    echo "Subcommands:"
    echo "    bar   Do bar"
    echo "    baz   Run baz"
    echo ""
    echo "For help with each subcommand run:"
    echo "$program <subcommand> -h|--help"
    echo ""
}

sub_init_echo_archives() {
    option=$1
    case $option
    in
        pg1016)  echo "https://ftp.postgresql.org/pub/source/v10.16/postgresql-10.16.tar.gz"
        ;;
        pg1111)  echo "https://ftp.postgresql.org/pub/source/v11.11/postgresql-11.11.tar.gz"
        ;;
        pg1206)  echo "https://ftp.postgresql.org/pub/source/v12.6/postgresql-12.6.tar.gz"
        ;;
        pg1302)  echo "https://ftp.postgresql.org/pub/source/v13.2/postgresql-13.2.tar.gz"
        ;;
        *     )  die "Unknown version $option"
    [ -d "${directory}/data" ]     ||  mkdir ${directory}/data
    [ -d "${directory}/bin" ]      ||  mkdir ${directory}/bin
    echo "[2]download source code: $filename" 2>&1 | tee -a ${logfile}
    [ -e "${directory}/download/${filename}" ] || ${fetch} -O "${directory}/download/${filename}" "${addr}" >> ${logfile} 2>&1 || die "Cannot download ${filename} from ${addr}"
    echo "[3]unpack: $filename" 2>&1 | tee -a ${logfile}
    [ -d "${directory}/src/${filena}" ] || tar xzf "${directory}/download/${filename}" -C ${directory}/src/ >> ${logfile} 2>&1 || die "Cannot extract package from ${filename}"

    echo "[4]yum install" 2>&1 | tee -a ${logfile}
    sudo yum -y install coreutils glib2 lrzsz mpstat dstat sysstat e4fsprogs xfsprogs ntp readline-devel zlib-devel openssl-devel pam-devel libxml2-devel libxslt-devel python-devel tcl-devel gcc make smartmontools flex bison perl-devel perl-ExtUtils* openldap-devel jadetex openjade bzip2 >> ${logfile} 2>&1 || die "echo \"$USER ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/test"

    echo "[5]sysctl"  2>&1 | tee -a ${logfile}

    echo "[6]configure port: ${port}"
    cd ${directory}/src/${filena} && ./configure --prefix=${directory}/bin/$1 --with-pgport=${port} --enable-depend --enable-cassert --enable-debug CFLAGS="-ggdb -O0" >> ${logfile} 2>&1 || die "configure failed"

    echo "[7]make&make install"
    cd ${directory}/src/${filena} && make -j16  >> ${logfile} 2>&1 || die "make failed"
    cd ${directory}/src/${filena} && make install >> ${logfile} 2>&1 || die "make install failed"

}

sub_run(){
    echo "Running 'baz' command."
    echo "First arg is '$1'."
    echo "Second arg is '$2'."
}

sub_stop(){
    echo "stop"
}



subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${subcommand} $@
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$program --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac
[root@iZf8z9gws1chrnriffp6pjZ<Controller> mingjie.gmj]#Shared connection to 47.115.202.83 closed.
➜  ~
➜  ~ k 47.115.202.83
Last login: Wed May 12 11:00:41 2021 from 42.120.75.149

Welcome to Alibaba Cloud Elastic Compute Service !

User Tips:
For better compatibility, Alibaba Cloud Linux 2 manages network settings via
network-scripts by default instead of former systemd-networkd.
More details please refer to:
https://help.aliyun.com/knowledge_detail/182049.html

3 package(s) needed for security, out of 20 available
Run "yum update" to apply all updates.
[root@iZf8z9gws1chrnriffp6pjZ<Controller> ~]#
[root@iZf8z9gws1chrnriffp6pjZ<Controller> ~]#
[root@iZf8z9gws1chrnriffp6pjZ<Controller> ~]#
[root@iZf8z9gws1chrnriffp6pjZ<Controller> ~]#ll
总用量 111172
drwxr-xr-x 23 root        root             4096 4月  26 11:44 ctags
drwxr-xr-x 41 mingjie.gmj mingjie.gmj      4096 5月   7 16:43 gcc-8.2.0
-rw-r--r--  1 root        root        113811063 7月  26 2018 gcc-8.2.0.tar.gz
-rw-r--r--  1 root        root              418 5月  10 15:51 gsql.c
-rwxr--r--  1 root        root              835 5月  11 11:32 gsql.sh
drwxr-xr-x  7 root        root             4096 5月   7 16:21 rotate
-rwxr--r--  1 root        root             1912 5月  11 16:43 rs
[root@iZf8z9gws1chrnriffp6pjZ<Controller> ~]#cat rs
#!/bin/sh
echo 000:$0
echo 111:$1
echo 222:$2
program='gsql'
version='(unversioned)'

die() {
    echo "error: $@" >&2
    exit 1
}

sub_help(){
    echo "Usage: $program <subcommand> [options]\n"
    echo "Subcommands:"
    echo "    bar   Do bar"
    echo "    baz   Run baz"
    echo ""
    echo "For help with each subcommand run:"
    echo "$program <subcommand> -h|--help"
    echo ""
}

sub_init_echo_archives() {
    option=$1
    case $option
    in
        pg1016)  echo "https://ftp.postgresql.org/pub/source/v10.16/postgresql-10.16.tar.gz"
        ;;
        pg1111)  echo "https://ftp.postgresql.org/pub/source/v11.11/postgresql-11.11.tar.gz"
        ;;
        pg1206)  echo "https://ftp.postgresql.org/pub/source/v12.6/postgresql-12.6.tar.gz"
        ;;
        pg1302)  echo "https://ftp.postgresql.org/pub/source/v13.2/postgresql-13.2.tar.gz"
        ;;
        *     )  die "Unknown version $option"
        ;;
    esac
}


sub_init(){
    base_url='https://www.postgresql.org/ftp/source'
    echo "[1] Start downloading at $base_url"
    if type wget > /dev/null ; then
        fetch='wget'
    else
        fetch='curl -LO -u anonymous:'
    fi
    directory=$2
    for ar in $(sub_init_echo_archives $1)
    do
        echo $ar
    done
    [ -d "${directory}" ] || die "No base directory: ${directory}"
    [ -d "${directory}/$1" ] || mkdir -p ${directory}/$1
}

sub_run(){
    echo "Running 'baz' command."
    echo "First arg is '$1'."
    echo "Second arg is '$2'."
}

sub_stop(){
    echo "stop"
}



subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${subcommand} $@
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$program --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac
